---
import BaseLayout from "~/layouts/BaseLayout.astro";
---

<BaseLayout
  title="Wind Waker"
  description="Generating water in the style of TLoZ: The Wind Waker using P5."
  image={{
    src: "/og/windwaker.png",
    alt: "Pixelated water from The Legend of Zelda: The Wind Waker",
  }}
>
  <div id="p5canvas"></div>
</BaseLayout>

<script>
  import p5 from "p5";

  const sketch = (p: p5) => {
    const w = window.innerWidth;
    const h = window.innerHeight;

    const cellSize = 6;

    const gridWidth = w / cellSize;
    const gridHeight = h / cellSize;

    let resolution: number;

    let t = 0;

    p.setup = () => {
      p.createCanvas(w, h, p.WEBGL);
      p.angleMode(p.DEGREES);
      p.noStroke();
      p.noSmooth();

      resolution = 0.02; // Scale factor for noise
    };

    p.draw = () => {
      p.background("#136aff");
      p.translate(-w / 2, -h / 2);
      t += 0.005;

      // Dark blue
      for (var x = 0; x < gridWidth; x++) {
        for (var y = 0; y < gridHeight; y++) {
          // Because the Perlin noise pattern repeats starting at 0,0,
          // we need to offset the pattern to avoid reflected symmetry
          const initialOffset = 1000;
          const vDrift = -t / 2; // Move down
          const hDrift = -t / 2; // Move right

          const noiseVal = p.noise(
            x * resolution + hDrift + initialOffset,
            y * resolution + vDrift + initialOffset,
            t / 4
          );

          if (
            (noiseVal > 0.3 && noiseVal < 0.34) ||
            (noiseVal > 0.5 && noiseVal < 0.54) ||
            (noiseVal > 0.7 && noiseVal < 0.74)
          ) {
            p.fill("#1461e3");
            p.rect(x * cellSize, y * cellSize, cellSize, cellSize);
          }
        }
      }

      // White seafoam
      for (var x = 0; x < gridWidth; x++) {
        for (var y = 0; y < gridHeight; y++) {
          const vDrift = t / 2; // Move up
          const hDrift = t / 2; // Move left

          const noiseVal = p.noise(
            x * resolution + hDrift,
            y * resolution + vDrift,
            t / 4
          );

          // const yWave = p.sin(x / 4) * cellSize;

          if (
            (noiseVal > 0.3 && noiseVal < 0.33) ||
            (noiseVal > 0.5 && noiseVal < 0.53) ||
            (noiseVal > 0.7 && noiseVal < 0.73) ||
            (noiseVal > 0.9 && noiseVal < 0.93)
          ) {
            p.fill(224, 252, 255);
            p.rect(x * cellSize, y * cellSize, cellSize, cellSize);
          }
        }
      }
    };
  };

  const canvas = document.getElementById("p5canvas");
  export const myp5 = new p5(sketch, canvas!);
</script>

<style>
  #p5canvas {
    display: fixed;
    inset: 0;
  }
</style>
