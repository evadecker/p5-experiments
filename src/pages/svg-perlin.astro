---
import BaseLayout from "~/layouts/BaseLayout.astro";
---

<BaseLayout
  title="Perlin Noise SVG Generation"
  description="Procedurally generated SVG scenes using Perlin noise and nice-color-palettes."
  image={{
    src: "/og/perlin-svg.png",
    alt: "A collection of pixelated blobs in various colors.",
  }}
>
  <svg id="svgOutput" xmlns="http://www.w3.org/2000/svg"></svg>
</BaseLayout>

<script>
  import colors from "nice-color-palettes";
  import { createNoise2D, type NoiseFunction2D } from "simplex-noise";

  const svg = document.getElementById("svgOutput");

  let zoom: number = 3;
  let scaleX: number;
  let scaleY: number;

  const cellSize = devicePixelRatio * zoom;

  let gridWidth: number;
  let gridHeight: number;

  let palette = colors[0];

  let noise: NoiseFunction2D;

  function setup() {
    clearCanvas();

    noise = createNoise2D();

    const w = window.innerWidth;
    const h = window.innerHeight;

    gridWidth = w / cellSize;
    gridHeight = h / cellSize;

    if (svg) {
      svg.setAttribute("width", `${w}px`);
      svg.setAttribute("height", `${h}px`);
    }

    // Get random palette
    palette = colors[Math.floor(Math.random() * colors.length)];

    // Random scale factors for noise
    scaleX = Math.random() * 50;
    scaleY = Math.random() * 50;
  }

  function drawPixel(x: number, y: number, size: number, color: string) {
    if (!svg) return;

    let rect = document.createElementNS("http://www.w3.org/2000/svg", "rect");
    rect.setAttribute("x", `${x}px`);
    rect.setAttribute("y", `${y}px`);
    rect.setAttribute("width", `${size}px`);
    rect.setAttribute("height", `${size}px`);
    rect.setAttribute("fill", color);

    svg.append(rect);
  }

  function drawCanvas() {
    for (let i = 0; i < gridWidth; i++) {
      for (let j = 0; j < gridHeight; j++) {
        // Max of 2
        const noiseVal = noise(i / scaleX, j / scaleY) + 1;

        let color: string;
        if (noiseVal < 0.5) {
          color = palette[0];
        } else if (noiseVal < 1) {
          Math.random() < 0.5 ? (color = palette[1]) : (color = palette[2]);
        } else if (noiseVal < 1.3) {
          Math.random() < 0.5 ? (color = palette[2]) : (color = palette[3]);
        } else color = palette[4];

        setTimeout(
          () => drawPixel(i * cellSize, j * cellSize, cellSize, color),
          noiseVal * 50 * (j / 3)
        );
      }
    }
  }

  function clearCanvas() {
    if (!svg) return;
    svg.innerHTML = "";
  }

  function run() {
    setup();
    drawCanvas();
  }

  run();

  let resizeTimer: NodeJS.Timeout;

  window.addEventListener("resize", () => {
    clearTimeout(resizeTimer);
    resizeTimer = setTimeout(function () {
      // Resizing has stopped
      run();
    }, 250);
  });
</script>
